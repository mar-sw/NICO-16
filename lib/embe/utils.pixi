fn _($el, $list) {
    $l = new()
    $l.Tail = $list
    $l.Head = $el
    ret ($l)
}

/* TODO:
    - Именовать узлы для доступа
*/
fn mix() {
    $this = new()
    $this.signals = -1
    $this.counter = 0

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2
        $this.counter + 1
        $this.signals = _($sig, $this.signals)
    }

    $this.gen = { // $this, $channels, $frames
        $this = $1
        $channels = $2
        $frames = $3

        clean($channels[0], 0)

        $ch = new()
        $ch[0] = new($frames, 1, INT8)

        $signals = $this.signals
        $i = 0 while $i < $this.counter {
            $i + 1
            $sig = $signals.Head
            $signals = $signals.Tail

            $sig.gen($sig, $ch, $frames)
            
            op_cc(OP_SADD, $channels[0], $ch[0], $frames)
        }

        remove($ch)
    }

    ret ($this)
}

fn vis_waveform() {
    $this = new()

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2
        $this.signal = $sig
    }

    $this.render = { // $this
        $this = $1

        clear()
        $frames = get_xsize($this.signal.Buf)
        $x = 0 while ($x < $frames) { 
            dot($x - $frames / 2, $this.signal.Buf[$x], 0xFFE0E0)
            $x + 1
        }
        frame()
    }

    ret ($this)
}

fn vis_tartan() {
    $this = new()

    $this.join = { // $this, $sig
        $this = $1
        $sig = $2
        $this.signal = $sig
    }

    $this.render = { // $this
        $this = $1

        $frames = get_xsize($this.signal.Buf)

        clear()
        $sx = 32
        $sy = 32

        $y = -$sy while $y < $sy {
            $x = -$sx while $x < $sx {

                $s = $this.signal.Buf[($y + $sy + ($x + $sx) * $sy) % $frames]
                $cc = 0
                if $s > 0 {
                    $cc = ($s * 16) % 256
                }

                $clr = get_color($cc, $cc, $cc)

                box(4 * $x, 4 * $y, 1, 1, $clr)
                box(4 * $y + 2, 4 * $x + 2, 1, 1, $clr)
                
                $x + 1
            }

            $y + 1
        }
        frame()
    }

    ret ($this)
}


fn j($proc, $sig) {
    $proc.join($proc, $sig)
}
